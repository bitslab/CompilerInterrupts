#------------------------------------------------------------------------------
# Copyright (c) 2007, Stanford University
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of Stanford University nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY STANFORD UNIVERSITY ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL STANFORD UNIVERSITY BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#------------------------------------------------------------------------------ 


#------------------------------------------------------------------------------
# File: Makefile
# 
# Note: This Makefile requires GNU make.
#------------------------------------------------------------------------------

CC = clang

OSTYPE = $(shell uname)

ifeq ($(OSTYPE),CYGWIN_NT-5.1)
ARCH = -D_CYGWIN_
endif

ifeq ($(OSTYPE),Linux)
ARCH = -D_LINUX_
endif

ifeq ($(OSTYPE),SunOS)
ARCH =  -D_SOLARIS_
endif

ifeq ($(OSTYPE),Darwin)
ARCH = -D_DARWIN_
endif

LLVM_BUILD ?= /mnt/nilanjana

PATH_OUT = ./$(OSTYPE)/

# these variables may be exported from outside
EXTRA_FLAGS ?= -DAVG_STATS
INST_LEVEL ?= 1
PUSH_INTV ?= 5000
CMMT_INTV ?= 1000
ALLOWED_DEVIATION ?= 100
CLOCK ?= 1
FIBER_CONFIG ?= 5
CONFIG ?= 2


OPT_FLAGS = -postdomtree -mem2reg -indvars -loop-simplify -branch-prob -scalar-evolution

LC_FLAGS = -load $(LLVM_BUILD)/lib/LLVMLogicalClock.so -S -logicalclock -config $(CONFIG) -clock-type $(CLOCK) -inst-gran $(INST_LEVEL) -all-dev $(ALLOWED_DEVIATION) -push-intv $(PUSH_INTV) -commit-intv $(CMMT_INTV) -mem-ops-cost 1 -fiber-config $(FIBER_CONFIG) 

CFLAGS = -Wall $(ARCH) -O3 -D_GNU_SOURCE $(EXTRA_FLAGS)
#LIBS = -lm -lpthread -lrt -lcpc
LIBS = -lm -lpthread -lrt -lpfm

REV_SEQ_OBJS = reverseindex-seq.o
REV_PTHREAD_OBJS = reverseindex-pthread.o
REV_OBJS = reverseindex.ll
COM_OBJS = MapReduceScheduler.ll

#PROGS = reverseindex reverseindex-seq reverseindex-pthread
PROGS = reverseindex

.PHONY: default clean

all: $(PROGS)

reverseindex-seq: $(REV_SEQ_OBJS)
	$(CC) $(CFLAGS) -o $@ $(REV_SEQ_OBJS) $(LIBS)

reverseindex-pthread: $(REV_PTHREAD_OBJS)
	$(CC) $(CFLAGS) -o $@ $(REV_PTHREAD_OBJS) $(LIBS)

reverseindex: reverseindex-lc.ll
	$(CC) $(CFLAGS) -o $@ $< $(LIBS)

reverseindex-lc.ll: reverseindex-opt.ll
	opt-9 $(LC_FLAGS) $^ -o $@

reverseindex-opt.ll: reverseindex-all.ll
	opt-9 $(OPT_FLAGS) -S $^ -o $@

reverseindex-all.ll: $(COM_OBJS) $(REV_OBJS)
	llvm-link-9 $^ -o $@

$(REV_OBJS): reverseindex.c
	clang-9 -S -emit-llvm $(CFLAGS) -o $@ $<

$(COM_OBJS): MapReduceScheduler.c
	clang-9 -S -emit-llvm $(CFLAGS) -o $@ $<

clean:
	rm -f $(PROGS) *.o *.a *~ *.tmp *.bak *.log *.ll
