divert(-1)
define(NEWPROC,) dnl

define(BARRIER, `{
	unsigned long	Error, Cycle;
	long		Cancel, Temp;

	Error = fiber_mutex_lock(&($1).mutex);
	if (Error != FIBER_SUCCESS) {
		printf("Error while trying to get lock in barrier.\n");
		exit(-1);
	}

	Cycle = ($1).cycle;
	if (++($1).counter != ($2)) {
	  //pthread_setcancelstate(PTHREAD_CANCEL_DISABLE, &Cancel); ## NOT REQUIRED IN LIBFIBER ##
		while (Cycle == ($1).cycle) {
			Error = fiber_cond_wait(&($1).cv, &($1).mutex);
			if (Error != FIBER_SUCCESS) {
				break;
			}
		}
		//pthread_setcancelstate(Cancel, &Temp); ## NOT REQUIRED IN LIBFIBER ##
	} else {
		($1).cycle = !($1).cycle;
		($1).counter = 0;
		Error = fiber_cond_broadcast(&($1).cv);
	}
	fiber_mutex_unlock(&($1).mutex);
}')

define(BARDEC, `
struct {
	fiber_mutex_t	mutex;
	fiber_cond_t	cv;
	unsigned long	counter;
	unsigned long	cycle;
} ($1);
')

define(BARINIT, `{
	unsigned long	Error;

	Error = fiber_mutex_init(&($1).mutex);
	if (Error != FIBER_SUCCESS) {
		printf("Error while initializing barrier.\n");
		exit(-1);
	}

	Error = fiber_cond_init(&($1).cv);
	if (Error != FIBER_SUCCESS) {
		printf("Error while initializing barrier.\n");
		fiber_mutex_destroy(&($1).mutex);
		exit(-1);
	}

	($1).counter = 0;
	($1).cycle = 0;
}')

define(BAREXCLUDE, `{;}')

define(BARINCLUDE, `{;}')

define(GSDEC, `long ($1);')
define(GSINIT, `{ ($1) = 0; }')
define(GETSUB, `{
  if (($1)<=($3))
    ($2) = ($1)++;
  else {
    ($2) = -1;
    ($1) = 0;
  }
}')

define(NU_GSDEC, `long ($1);')
define(NU_GSINIT, `{ ($1) = 0; }')
define(NU_GETSUB, `GETSUB($1,$2,$3,$4)')

define(ADEC, `long ($1);')
define(AINIT, `{;}')
define(PROBEND, `{;}')

define(LOCKDEC, `fiber_mutex_t ($1);')
define(LOCKINIT, `{fiber_mutex_init(&($1));}')
define(LOCK, `{fiber_mutex_lock(&($1));}')
define(UNLOCK, `{fiber_mutex_unlock(&($1));}')

define(NLOCKDEC, `long ($1);')
define(NLOCKINIT, `{;}')
define(NLOCK, `{;}')
define(NUNLOCK, `{;}')

define(ALOCKDEC, `fiber_mutex_t $1[$2];')
define(ALOCKINIT, `{
	unsigned long	i, Error;

	for (i = 0; i < $2; i++) {
		Error = fiber_mutex_init(&$1[i]);
		if (Error != FIBER_SUCCESS) {
			printf("Error while initializing array of fiber mutex locks.\n");
			exit(-1);
		}
	}
}')
define(ALOCK, `{fiber_mutex_lock(&$1[$2]);}')
define(AULOCK, `{fiber_mutex_unlock(&$1[$2]);}')

define(PAUSEDEC, `
struct {
	fiber_mutex_t	Mutex;
	fiber_cond_t	CondVar;
	unsigned long	Flag;
} $1;
')
define(PAUSEINIT, `{
	fiber_mutex_init(&$1.Mutex);
	fiber_cond_init(&$1.CondVar);
	$1.Flag = 0;
}
')
define(CLEARPAUSE, `{
	$1.Flag = 0;
	fiber_mutex_unlock(&$1.Mutex);}
')
define(SETPAUSE, `{
	fiber_mutex_lock(&$1.Mutex);
	$1.Flag = 1;
	fiber_cond_broadcast(&$1.CondVar);
	fiber_mutex_unlock(&$1.Mutex);}
')
define(EVENT, `{;}')
define(WAITPAUSE, `{
	fiber_mutex_lock(&$1.Mutex);
	if ($1.Flag == 0) {
		fiber_cond_wait(&$1.CondVar, &$1.Mutex);
	}
}')
define(PAUSE, `{;}')

define(AUG_ON, ` ')
define(AUG_OFF, ` ')
define(TRACE_ON, ` ')
define(TRACE_OFF, ` ')
define(REF_TRACE_ON, ` ')
define(REF_TRACE_OFF, ` ')
define(DYN_TRACE_ON, `;')
define(DYN_TRACE_OFF, `;')
define(DYN_REF_TRACE_ON, `;')
define(DYN_REF_TRACE_OFF, `;')
define(DYN_SIM_ON, `;')
define(DYN_SIM_OFF, `;')
define(DYN_SCHED_ON, `;')
define(DYN_SCHED_OFF, `;')
define(AUG_SET_LOLIMIT, `;')
define(AUG_SET_HILIMIT, `;')

define(MENTER, `{;}')
define(DELAY, `{;}')
define(CONTINUE, `{;}')
define(MEXIT, `{;}')
define(MONINIT, `{;}')

define(WAIT_FOR_END, `{
	unsigned long	i, Error;
	for (i = 0; i < ($1) - 1; i++) {
		Error = fiber_join(FiberTable[i], NULL);
		if (Error != FIBER_SUCCESS) {
			printf("Error in fiber_join().\n");
			exit(-1);
		}
	}
}')

define(CREATE_WITH_PARAM2, `{
	long	i, Error;

	for (i = 0; i < ($2) - 1; i++) {
		Error = fiber_create(8196, (void * (*)(void *))($1), (void*)thrIndex);

    thrIndex++;
		if (Error == NULL) {
			printf("Error in fiber_create().\n");
			exit(-1);
		} else {
			FiberTable[i] = Error;
		}
	}
	$1((void*)0);
}')

define(CREATE_WITH_PARAM, `{
	long	i;
	fiber_t * Error;
#ifdef LC_CHECK
  //lc_enabled = 1;
#endif

  unsigned int thrIndex = 1;
	for (i = 0; i < ($2) - 1; i++) {
		Error = fiber_create(8192, (void * (*)(void *))($1), (void*)thrIndex);

    thrIndex++;
		if (Error == NULL) {
			printf("Error in fiber_create().\n");
			exit(-1);
		} else {
			FiberTable[i] = Error;
		}
	}
	$1((void*)0);
}')

define(CREATE, `{
	long	i;
	fiber_t * Error;

	for (i = 0; i < ($2) - 1; i++) {
		Error = fiber_create(8196, (void * (*)(void *))($1), NULL);
		if (Error == NULL) {
			printf("Error in fiber_create().\n");
			exit(-1);
		} else {
      //printf("Created fiber %d\n", i);
			FiberTable[i] = Error;
		}
	}

	$1();
}')

define(THREAD_INIT, `{
    init_stats($1);
    }')

define(MAIN_INITENV, `{
    }')

define(MAIN_END, `{
    exit(0);}')

define(MAX_CPUS, `64')
define(MAX_THREADS, `64')

define(MAIN_ENV,`
#include <pthread.h>
#include <sys/time.h>
#include <unistd.h>
#include <stdlib.h>
#include "fiber_manager.h"
#include "fiber_cond.h"
#include "TriggerAction.h"
#define MAX_FIBERS 1000
fiber_t *FiberTable[MAX_FIBERS];
')

define(ENV, ` ')
define(EXTERN_ENV, `
#include <pthread.h>
#include <sys/time.h>
#include <unistd.h>
#include <stdlib.h>
#include "TriggerActionDecl.h"
#include "fiber_manager.h"
#include "fiber_cond.h"
extern fiber_t *FiberTable[];
')

define(G_MALLOC, `malloc($1);')
define(G_FREE, `free($1);')
define(G_MALLOC_F, `malloc($1)')
define(NU_MALLOC, `malloc($1);')
define(NU_FREE, `free($1);')
define(NU_MALLOC_F, `malloc($1)')

define(GET_HOME, `{($1) = 0;}')
define(GET_PID, `{($1) = 0;}')
define(AUG_DELAY, `{sleep ($1);}')
define(ST_LOG, `{;}')
define(SET_HOME, `{;}')
define(CLOCK, `{
	struct timeval	FullTime;

	gettimeofday(&FullTime, NULL);
	($1) = (unsigned long)(FullTime.tv_usec + FullTime.tv_sec * 1000000);
}')
divert(0)
